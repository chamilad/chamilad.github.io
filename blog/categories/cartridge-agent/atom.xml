<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cartridge agent | nuts!]]></title>
  <link href="http://chamilad.github.io/blog/categories/cartridge-agent/atom.xml" rel="self"/>
  <link href="http://chamilad.github.io/"/>
  <updated>2015-11-27T11:24:13+05:30</updated>
  <id>http://chamilad.github.io/</id>
  <author>
    <name><![CDATA[chamila de alwis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Apache Stratos Cartridge Agent: Life Cycle Walkthough]]></title>
    <link href="http://chamilad.github.io/blog/2015/03/22/apache-stratos-cartridge-agent-life-cycle-walkthough/"/>
    <updated>2015-03-22T17:48:56+05:30</updated>
    <id>http://chamilad.github.io/blog/2015/03/22/apache-stratos-cartridge-agent-life-cycle-walkthough</id>
    <content type="html"><![CDATA[<blockquote><p>This is a part of a series of articles on Apache Stratos Cartridge Agent. If you feel like you&rsquo;ve missed the memo, why not start from the <a href="http://code.chamiladealwis.com/blog/2015/03/17/apache-stratos-cartridge-agent-contract/">first article</a>?</p></blockquote>

<p>The Cartridge Agent is (usually) the first service that starts in a spawned Cartridge instance. From that point onwards, it is responsible for keeping the relevant services running, communicating with Stratos to subscribe and publish to message broker topics, processing received events, artifact distribution and health statistics reporting. In this article we will discuss in detail, in which order these tasks are performed.</p>

<h1>Setup</h1>

<p>For our walkthrough let&rsquo;s take an application with a single PHP cartridge. The Puppet manifest for this PHP cartridge is distributed with Stratos source. The application will only consist of this cartridge. Following is the deployed application view of the Single PHP Cartridge Application.</p>

<p><img src="/images/post_resource/stratos/php-app-dep.png"></p>

<h2>Deploying the Application</h2>

<p>The sample scripts and artifacts for our scenario is available in the <code>samples</code> folder of the Stratos source. You can deploy this sample in any one of the available IaaS options including the Mock IaaS that is available in Stratos for developer testing purposes. Following is how it can be deployed in the Mock IaaS.</p>

<p>```bash</p>

<h1>navigate to the sample application folder</h1>

<p>cd &lt;STRATOS_SOURCE>/samples/applications/single-cartridge/scripts/mock</p>

<h1>run deploy script</h1>

<p>./deploy.sh
```</p>

<p>However the Mock IaaS does not involve the Cartridge Agent execution, and therefore is a bit irrelevant in our scenario. You can deploy the same application in OpenStack or Amazon EC2 to witness the Cartridge Agent execution. You can even use Docker on Kubernetes and deploy a Kubernetes cluster to deploy this Single PHP Cartridge application.</p>

<h2>What to Look For</h2>

<p>The steps that are explained here can be observed by looking at several sources. The Cartridge Agent logs and the Stratos log are the primary sources where published and received logs can be viewed. The Java Cartridge Agent logs are located in <code>/var/logs/apache-stratos/cartridge-agent.log</code> and the full Python Cartridge Agent logs can be located in the <code>/tmp/agent.screen.log</code>. The Python Cartridge Agent additionally has two other logs, <code>agent.log</code> which log the configured log level, <code>INFO</code> being the default, and the <code>error.log</code> which only log <code>ERROR</code> level logs. These two can be found in the Python Cartridge Agent home, by default in <code>/mnt/apache-stratos-python-cartridge-agent-4.1.0/</code>.</p>

<h2>Reference Image</h2>

<p>Most events that occur in a successful execution cycle of the Cartridge Agent is illustrated as a <a href="https://cwiki.apache.org/confluence/download/attachments/42567880/Cartridge%20Agent%20Lifecycle.png?api=v2">flow chart</a>. This does not include the failure scenarios and some multi-threaded executions are not properly illustrated, due to the limited nature of showing such details in a flow chart. However it is a good reference point to understand the Cartridge Agent life cycle in a sequential manner.</p>

<h1>Instance States</h1>

<p>An instance goes through a set of states during its life cylce. These states determine the behavior of the instance as well as other components in Stratos, when taking decisions about the instance. Following are the states that a spawned instance goes through during its life cycle.</p>

<ol>
<li>Created &ndash; Instance is created in the IaaS. But execution inside has not started.</li>
<li>Initialized &ndash; The execution of processes have started in the instance. Now the init scripts have started executing and Puppet agent would probably be running. Cartridge Agent will also start while being in this state.</li>
<li>Starting &ndash; The Cartridge Agent has published the InstanceStartedEvent for this instance</li>
<li>Active &ndash; The Cartridge Agent has published InstanceActivatedEvent. This indicates that the services in the cartridge instance are working and accepting requests. The instance can now be consumed.</li>
<li>Pending Termination &ndash; The instance is moved to a termination pending queue, where the graceful shutdown of the instance has been called for.</li>
<li>Obsolete &ndash; If the instance was in the Pending Termination state, then the Cartridge Agent has published InstanceReadyToShutdownEvent. An instance can also end up in the Obsolete state directly from Starting, or Initialized states because of various reasons. The instances in the obsolete queue will be terminated eventually.</li>
</ol>


<p>The state transitions can also be seen from the reference image. Additionally, you can understand how the member state transition happens from the Autoscaler side by going through <a href="http://lahiruwrites.blogspot.com/2015/03/stratos-410-deveper-guide-autoscaler.html">this</a> article written by Lahiru Sandaruwan.</p>

<p>With this knowledge at hand, let us dive in to the walkthrough right away.</p>

<h2>Created</h2>

<p>When the application is deployed after creating the Cluster Monitors for each cluster of Cartridges, Cloud Controller issues instance creation requests to the IaaS via JClouds. The instance state at the moment is <code>CREATED</code>.</p>

<h2>Initialized</h2>

<p>When the instance creation is complete, the IP addresses are assigned, and the instance starts execution, the status changes to <code>INITIALIZED</code>. The init scripts are executed and the Puppet agent downloads and applies the related Puppet manifests to the instance. Puppet is also responsible for starting the Cartridge Agent process. In the earlier releases, Puppet additionally started the service processes, for example Tomcat server etc. However, in the new release it is the responsibility of the Cartridge Agent to check and start the service processes. To achieve this, a Cartridge Agent plugin has to be written which will start the process.</p>

<p>The reason to move the responsibility of starting the service to the Cartridge Agent was to make sure that the services would not be starting without artifact distribution succeeding for repository based Cartridge types such as Tomcat, PHP or WSO2 Identity Server. For example, for a Tomcat instance, starting the Tomcat server without the repository artifacts not cloned in to the <code>webapps</code> folder, does not make any sense. Therefore, the service should not be up and the Cartridge Agent will not be publishing the InstanceActivatedEvent to the message broker.</p>

<p>Therefore for repository based Cartridge types, the service starter Cartridge Agent plugin should be mapped to the ArtifactsUpdatedEvent. If the Git clone operation performs successfully, the plugin will be executed and the service will be started. For non-repository based Cartridges such as MySQL, the service starter plugin can be mapped to InstanceStartedEvent.</p>

<p>After the Cartridge Agent is started it will start listening to the following topics in the message broker.
1. topology
2. tenant
3. instance/notifier
4. application/signup
5. domain/mapping</p>

<p>For the Cartridge Agent to successfully continue it should populate itself an idea of the services deployed in Stratos and how they are distributed. This is called the Topology in Stratos. The Topology describes what services are deployed, how clusters and members are deployed under those services and the lifecycle states of the clusters and the members.</p>

<p>The Topology information is distributed among Stratos components as a message broker event called the <code>CompleteTopologyEvent</code>. This is published every 60 seconds. The usual pattern for components to synchronize the Topology model is to receive the CompleteTopologyEvent only once and modify the topology based on the other events subsequently.</p>

<p>Therefore, the Cartridge Agent should wait until it receives the first CompleteTopologyEvent. As mentioned before, this waiting will be at most 60 seconds.</p>

<p>Just receiving the <code>CompleteTopologyEvent</code> is not sufficient. The Cartridge Agent should also verify that its instance is present in the Topology and the status of the instance is <code>INITIALIZED</code>. Usually, this will be the case when the first <code>CompleteTopologyEvent</code> is received, however there can be instance that it would be few minutes until the member is set to <code>INITIALIZED</code>. Cartridge Agent will also wait for that to happen.</p>

<p>After the instance status becomes <code>INITIALIZED</code> and the message broker topic listeners are registered, the Cartridge Agent will publish <code>InstanceStartedEvent</code> to the <code>instance\status</code> topic. This changes the status of the instance from <code>INITIALIZED</code> to <code>STARTED</code>.</p>

<h2>Started</h2>

<p>When the instance status changes to this state, the Cartridge Agent&rsquo;s next responsibility, from Stratos point of view, is to go in to the <code>ACTIVATED</code> state. This status is achieved through two effective flows, based on the type of the instance.</p>

<h3>Non-repo based instances</h3>

<p>If the instance is for example a MySQL instance, there is no need for a repository to be cloned inside (for most cases). In this case (determined by the absence of <code>REPO_URL</code> in the payload) the Cartridge agent checks if the service ports (ex: MySQL ports) are running and immediately publishes the <code>InstanceActivatedEvent</code>.</p>

<h3>Repo based instance</h3>

<p>In our case, the PHP instance is a repository based instance, where for example, a PHP application hosted on GitHub can be pointed to. If the <code>REPO_URL</code> is present on the payload the Cartridge Agent will move on without publishing the <code>InstanceActivatedEvent</code>. For a repo based instance, Stratos Manager will publish a separate event named <code>ArtifactUpdatedEvent</code> which the Cartridge Agent responds to by cloning the specified Git repository to the specified path. After the artifact repository is cloned, the Cartridge Agent will check if the service ports (in our case if Apache Server ports) are up and publish <code>InstanceActivatedEvent</code>.</p>

<h2>Activated</h2>

<p>Once the instance reaches the <code>ACTIVATED</code> stage, the initial tasks of the Cartridge Agent are done. It will periodically update the artifact repository based on the configuration, and would react to any events received via the message broker.</p>

<h2>Termination</h2>

<p>The instance can now go to either Pending Termination state if the application is undeployed. This is called a graceful shutdown flow, where the status of the instance switches from Active->Pending Termination->Obsolete->Terminated one after the other.</p>

<p>However, an instance can be directly classified as obsolete too, as described by the <a href="http://code.chamiladealwis.com/blog/2015/03/17/apache-stratos-cartridge-agent-contract/">the first post</a> of this post series. If it fails to post health statistics events to the Complext Event Processor for more than 60 seconds, it will be classified as an obsolete instance and will be queued up for termination.</p>

<p>When an instance reaches the Pending Termination queue, an <code>InstanceCleanupMemberEvent</code> will be published to the message broker. The relevant instance picks up this event and does the necessary cleanup operations and subsequently publishes that it is ready to be terminated by publishing <code>InstanceReadyToShutdownEvent</code> to the message broker. When that happens it will be moved up to the obsolete queue.</p>

<p>There are timeout values for the instances to be in these queues. The default value for an instance to be in the pending termination member list is 30 minutes. If the relevant <code>InstanceReadyToShutdownEvent</code> doesn&rsquo;t get published within that timeout period, the instance will be automatically moved to the obsolete queue. If the member termination from the IaaS doesn&rsquo;t successfully complete within the default timeout value of 24 hours, it will be considered as an instance that cannot be terminated by Stratos and will be removed from the obsolete member list. The timeout values for these can be modified by modifying the <code>pendingTerminationMemberExpiryTimeout</code> and <code>obsoletedMemberExpiryTimeout</code> values respectively in the <code>&lt;STRATOS_HOME&gt;/repository/conf/autoscaler.xml</code> configuration file.</p>

<h1>Recap</h1>

<p>When the instance reaches its life time, so does this post series on the Apache Stratos Cartridge Agent. There are few minute details that have changed while this series was being compiled, however the overall information about the architecture and the function remains unchanged.</p>

<p>As always, the best strategy to understand the function is to go through the code. You can checkout the source for Apache Stratos from <a href="https://github.com/apache/stratos">GitHub</a>. Any issues or clarifications you come across can be quickly resolved by going through the <a href="https://cwiki.apache.org/confluence/display/STRATOS">documentation</a>. You can also get help and communicate with the Apache Stratos community via the mailing list.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Stratos Cartridge Agent: Instance Configuration by Puppet 2]]></title>
    <link href="http://chamilad.github.io/blog/2015/03/21/apache-stratos-cartridge-agent-instance-configuration-by-puppet-2/"/>
    <updated>2015-03-21T23:25:09+05:30</updated>
    <id>http://chamilad.github.io/blog/2015/03/21/apache-stratos-cartridge-agent-instance-configuration-by-puppet-2</id>
    <content type="html"><![CDATA[<blockquote><p>This is a part of a series of articles on Apache Stratos Cartridge Agent. If you feel like you&rsquo;ve missed the memo, why not start from the <a href="http://code.chamiladealwis.com/blog/2015/03/17/apache-stratos-cartridge-agent-contract/">first article</a>?</p></blockquote>

<p>One of the main responsibilities of the Cartridge Agent is to start the services related the Cartridge type. To do this the Cartridge Agent should be configured with proper parameters. As we discussed in the <a href="http://code.chamiladealwis.com/blog/2015/03/17/apache-stratos-cartridge-agent-instance-configuration-by-puppet/">last article</a>, Puppet can be used to install, configure and start the Cartridge Agent. In this article, we will discuss how this is done in detail.</p>

<h1>Configurations</h1>

<p>The Cartridge Agent needs several parameters to start functioning correctly.</p>

<ol>
<li>Message broker IP address and port</li>
<li>Complex Event Processor IP address and port</li>
<li>Application path (for repository based cartridges)</li>
</ol>


<p>In addition to these parameters, there are several others which might be crucial to Cartridge Agent life cycle, based on different scenarios. However, at minimum, it needs the details of the above mentioned parameters to successfully function.</p>

<p>For orchestration in the VM scenario, we provide these values to Puppet, which in turn will configure the Cartridge Agent accordingly.</p>

<h2>base.pp</h2>

<p>The purpose of the <code>base.pp</code> in <code>/etc/puppet/manifests/nodes/</code> folder is to serve as a super node definition which can be inherited by service type node definitions. It contains a list of variables that can be used by any module that inherits it. As of Stratos 4.1.0 release the contents of the <code>base.pp</code> file looks like as follows. The variables are pretty much self explanatory.</p>

<p>```puppet
node &lsquo;base&rsquo; {</p>

<p>  #essential variables
  $package_repo         = &lsquo;<a href="http://10.4.128.7">http://10.4.128.7</a>&rsquo;
  $local_package_dir    = &lsquo;/mnt/packs&rsquo;
  $mb_url               = &lsquo;tcp://127.0.0.1:1883&rsquo;
  $mb_type              = &lsquo;activemq&rsquo; #in wso2 mb case, value should be &lsquo;wso2mb&rsquo;
  $cep_ip               = &lsquo;127.0.0.1&rsquo;
  $cep_port             = &lsquo;7711&rsquo;
  $cep_username         =&lsquo;admin&rsquo;
  $cep_password         =&lsquo;admin&rsquo;
  $truststore_password  = &lsquo;wso2carbon&rsquo;
  $java_distribution    = &lsquo;jdk-7u51-linux-x64.tar.gz&rsquo;
  $java_name            = &lsquo;jdk1.7.0_51&rsquo;
  $member_type_ip       = &lsquo;private&rsquo;
  $lb_httpPort          = &lsquo;80&rsquo;
  $lb_httpsPort         = &lsquo;443&rsquo;
  $tomcat_version       = &lsquo;7.0.52&rsquo;
  $enable_log_publisher = &lsquo;false&rsquo;
  $bam_ip               = &lsquo;127.0.0.1&rsquo;
  $bam_port             = &lsquo;7611&rsquo;
  $bam_secure_port      = &lsquo;7711&rsquo;
  $bam_username         = &lsquo;admin&rsquo;
  $bam_password         = &lsquo;admin&rsquo;
  $metadata_service_url = &lsquo;<a href="https://127.0.0.1:9443">https://127.0.0.1:9443</a>&rsquo;</p>

<p>  require stratos_base
}
```</p>

<p>The <code>base.pp</code> file should be modified to include proper values when the Puppet master is configured.</p>

<h2>Cartridge Agent modules</h2>

<p>Apache Stratos 4.1.0 ships with two implementations of the Cartridge Agent, default Java agent and a Python based agent. The respective Puppet modules for these implementations are <code>agent</code> and <code>python_agent</code> inside <code>/etc/puppet/modules</code> folder.</p>

<p>Both modules have a similar flow of execution, where there are separate steps to,</p>

<ol>
<li>Copy the Cartridge Agent distribution from the Puppet master to the instance</li>
<li>Copy templates reflecting configuration files, Cartridge Agent extensions and plugins, and configure parameters as given by <code>base.pp</code> and calling modules</li>
<li>Start Cartridge Agent</li>
</ol>


<p>If a calling module (the module which includes the Cartridge Agent module, typically a service type like PHP) needs to override a value provided through base.pp it can do so by assigning the new value to the variable at the time of Puppet module inclusion.</p>

<h3>Cartridge Agent Extensions and Plugins</h3>

<p>In addition to <a href="http://code.chamiladealwis.com/2015/03/17/apache-stratos-cartridge-agent-contract/">what the Cartridge Agent does as a generic agent to all services</a>, each service can make use of extensions, and in the Python implementation, plugins to add additional behavior to it. We will go in to more details about the extensions and plugins in a separate article, however you only need to be aware of them as being executed for specified events that are processed by the Cartridge Agent. For example, you can have an extension that can be specified to be executed, when an ArtifactUpdatedEvent is processed by the Cartridge Agent.</p>

<p>For each service that includes the Puppet module for a certain implementation of the Cartridge Agent, it can specify a list of extensions and plugins that should be copied over to the Cartridge Agent. For example, this is how the PHP module specifies the list of plugins and extensions that should be included in the Cartridge Agent, when the running service is PHP.</p>

<p>```puppet
  $custom_agent_templates = [&lsquo;extensions/artifacts-updated.sh&rsquo;]
  $custom_plugins = [&lsquo;plugins/PhpServerStarterPlugin.py&rsquo;, &lsquo;plugins/PhpServerStarterPlugin.yapsy-plugin&rsquo;]
  class {&lsquo;python_agent&rsquo;:</p>

<pre><code>custom_templates =&gt; $custom_agent_templates,
custom_plugins =&gt; $custom_plugins,
module=&gt;'php'
</code></pre>

<p>  }
```</p>

<p>While the Cartridge Agent is executing, these specified extensions and plugins will be executed when their respective events are processed.</p>

<p>As mentioned above, it is the responsibility of the Cartridge Agent to start the respective services related to the spawned Cartridge. This is also done using a Cartridge Agent plugin (Python implementation) or an extension (Java implementation).</p>

<h1>Conclusion for Configuration</h1>

<p>By the end of this article, we should be aware of the details of the configuration needed by the Cartridge Agent. At least, that was my intention. If you feel like I&rsquo;ve missed a crucial explanation, feel free to drop a comment.</p>

<p>As of now, Apache Stratos only supports Puppet as a configuration tool for Cartridge instances. However in the future releases, it will also be possible use Chef, or another similar tool as a replacement for Puppet.</p>

<p>From this point onwards, we will start on the details of the Cartridge Agent life cycle execution. For that we will first go through a typical work flow of a PHP Cartridge instance&hellip;. in the next article!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Stratos Cartridge Agent: Instance Configuration by Puppet 1]]></title>
    <link href="http://chamilad.github.io/blog/2015/03/17/apache-stratos-cartridge-agent-instance-configuration-by-puppet/"/>
    <updated>2015-03-17T05:43:48+05:30</updated>
    <id>http://chamilad.github.io/blog/2015/03/17/apache-stratos-cartridge-agent-instance-configuration-by-puppet</id>
    <content type="html"><![CDATA[<blockquote><p>This is a part of a series of articles on Apache Stratos Cartridge Agent. If you feel like you&rsquo;ve missed the memo, why not start from the <a href="http://code.chamiladealwis.com/blog/2015/03/17/apache-stratos-cartridge-agent-contract/">first article</a>?</p></blockquote>

<h1>Instance Configuration</h1>

<p>When an application is deployed in Apache Stratos, what happens is that for each cartridge in the application, an instance creation call is made to the configured IaaS via the Cloud Controller component. This call contains only the base image ID (in OpenStack this is an image UUID, in Amazon EC2 this is an AMI), the instance creation parameters like the instance flavor, security group etc and the payload of Stratos related information that is targeted to that particular instance. So how does the actual configuration of a spawned Virtual Machine happen? (We will discuss the exciting Kubernetes + Docker work flow separately)</p>

<p>The answer, my friend, is <em>dancing</em> in the wind, like a puppet.</p>

<p>Yes, with that bad pun sentence thingy, I&rsquo;ve introduced you to Puppet, the tool which configures each and every instance spawned by Stratos.</p>

<h2>Puppeteering: A brief introduction</h2>

<p>Simply said, Puppet automates the configuration details of a machine to bring it to an intended state. Let&rsquo;s take a scenario where you have to configure and start a LAMP stack on a single machine. Without Puppet you will be doing the following tasks manually.</p>

<ol>
<li>Update the package management system and install util packages</li>
<li>Install and configure HTTPD</li>
<li>Install PHP and configure with HTTPD</li>
<li>Install and configure MySQL</li>
<li>A precautionary HTTPD restart</li>
</ol>


<p>With Puppet, you will be defining all these steps in a manifest file, using Puppet&rsquo;s Ruby based DSL. Nope, that is not what a Puppet manifest contains. What you will be actually defining in a Puppet manifest will be the intended state of the machine. For example, you will be defining a list of packages that should be present (or not), the lines of configuration a certain file should have, and the list of services that should be running (or not), in the configured machine (&ldquo;What&rsquo;s difference&rdquo; you ask? Well, the difference is that, for example, Puppet wouldn&rsquo;t try to execute an install action on a package that is already there in the system).</p>

<p>You can apply this Puppet manifest in the target machine and the Puppet agent will make sure each state is changed to the intended state, and at the end of the Puppet run (if you wrote the manifest correctly) a LAMP stack will be ready for you.</p>

<p>A Puppet setup consists of a server-client architecture. The Puppet server is called (surprisingly) the <code>Puppet Master</code>, and the client is the <code>Puppet agent</code>. You can add Puppet <em>modules</em> for each service (modularizing services is arbitrary, you can break your configuration in to modules at any level), to the Puppet master, then add the machines which needs to be configured (each of these machines should have Puppet agent installed), define nodes (ex: LAMP, database, LAP etc) and classify each machine to the nodes. Upon classification, the modules defined by each node will be applied by the Puppet agent in the target machines.</p>

<p>In our little example, we can have different Puppet modules for HTTPD, PHP, and MySQL, and then define node types for LAMP (which uses all three modules), Database (which only uses the MySQL module) and LAP (which uses only the HTTPD and the PHP modules). As you&rsquo;d probably start to see, modules and nodes are a reuse strategy.</p>

<h2>Puppet in Stratos</h2>

<p>The intended Puppet strategy in Stratos is to define each cartridge as a Puppet node definition. For the PHP cartridge there will be a PHP Puppet node definition in the Puppet master. In turn, each node definition should be an aggregate of the following Puppet modules (ex: PHP).</p>

<ul>
<li>stratos_base &ndash; Installs common utility packages needed by every cartridge</li>
<li>service module &ndash; PHP</li>
<li>cartridge_agent &ndash; Python or Java Agent (and Java module if Java agent is used)</li>
</ul>


<p>The PHP node definition should have something like the following that defines in which order these modules should be applied.</p>

<p>```puppet
Class[&lsquo;stratos_base&rsquo;]&ndash;>Class[&lsquo;php&rsquo;]&ndash;>Class[&lsquo;python_agent&rsquo;]</p>

<h1>or if we are using the Java implementation of the Cartridge Agent</h1>

<p>Class[&lsquo;stratos_base&rsquo;]&ndash;>Class[&lsquo;php&rsquo;]&ndash;>Class[&lsquo;java&rsquo;]&ndash;>Class[&lsquo;agent&rsquo;]
```</p>

<p>To state the almost obvious, this Puppet directive states that the Puppet classes (which are <em>in no way</em> associated with the classes in OOP) <code>stratos_base</code>, <code>php</code>, (<code>java</code>, <code>agent</code>) | (<code>python_agent</code>) should be applied one after the other, or <code>python_agent</code> depends on <code>php</code> module, and <code>php</code> depends on <code>stratos_base</code> module. Apache Stratos ships a standard set of Puppet modules related to a various set of cartridge types, which are supported out of the box.</p>

<p>All of this aside, how does Puppet master know which node definition to be applied to which instance? Unlike the usual work flow where a listed machine is classified manually from the Puppet master web interface, this is done automatically in Stratos. To understand this classification, we need to understand how the initialization of an instance happens when it is spawned in the IaaS.</p>

<h1>Base Images and init scripts</h1>

<p>As I&rsquo;ve mentioned earlier, when spawning an instance from the IaaS, Stratos specifies a <em>base image</em> to spawn that particular instance from. Where does this base image come from? As a Stratos <em>user</em> you will most likely not be working with cartridge definitions and base images. However as a <em>sysadmin</em> working with a Stratos deployment you will be defining various cartridge types, their Puppet modules, and the base images to spawn these cartridge instances.</p>

<p>A base image is, simply said, an initial state of a Virtual machine, from where the execution can start. There can be a base image which only contains the Operating System, or there can be a base image which has gone a little bit further and installed a few of the services as well. It&rsquo;s a like a VM snapshot you take on VirtualBox, a starting point with a certain set of work already done, that otherwise need to be done to spawn a working instance. At most this should contain an Operating System. A Stratos Cartridge base image should have more, to be precise the following, to be a minimal (or as it is called in Stratos, a <em>default</em>) base image.</p>

<ol>
<li>Operating system</li>
<li>Utility packages (zip, unzip, etc)</li>
<li>Puppet agent</li>
<li>A Stratos init script</li>
</ol>


<p>Others being self explanatory, an init script is simply a bash script which is copied in to the <code>/root/bin</code> folder <a href="https://cwiki.apache.org/confluence/display/STRATOS/4.1.0+Creating+a+Cartridge+on+OpenStack">at the time of the creation of the base image</a>. This script is then automatically executed when the instance is started. An init script&rsquo;s tasks should be the following in the stated order, in the context of a Stratos cartridge instance.</p>

<ol>
<li>Retrieve payload parameters related to the spawned instance from the IaaS meta-data service (<a href="http://docs.openstack.org/admin-guide-cloud/content/section_metadata-service.html">in OpenStack</a>)</li>
<li>Parse payload parameters and set configuration values in the instance.</li>
<li>Include service name (ex: php, tomcat i.e. the cartridge type) and the Puppet master host name, in the instance host name. (Yes, this is what we should look at to understand the communication between the Puppet agent and the master in Stratos)</li>
<li>Execute Puppet agent</li>
</ol>


<p>The Puppet agent will apply the retrieved catalogs from the Puppet master and start the Cartridge Agent.</p>

<h2>Payload Parameters</h2>

<p>Ever IaaS has a meta-data service where instance specific data can be written to it to be queried by the instance. For an example, in OpenStack this service can be accessed by making a <code>wget</code> call to <code>http://169.254.169.254/latest/user-data</code> URL. When Stratos makes a instance spawn call to the IaaS (via JClouds library), it passes a set of payload parameters that are specific to the instance. This payload looks something like the following.</p>

<p><code>
SERVICE_NAME         =php
HOST_NAME            =newoice.stratos.com
MULTITENANT          =false
TENANT_ID            =-1234
TENANT_RANGE         =-1234
CARTRIDGE_ALIAS      =newoice
CLUSTER_ID           =newoice.php.domain
CARTRIDGE_KEY        =BNdP01v8VEQPPYGY
DEPLOYMENT           =default
REPO_URL             =https://github.com/chamilad/NeWoice.git
PORTS                =80
PUPPET_IP            =192.133.10.53
PUPPET_HOSTNAME      =puppet.chamilad.org
COMMIT_ENABLED       =false
MEMBER_ID            =newoice.php.domain192a96cd-844e-4dca-a829-a63664d29724
LB_CLUSTER_ID        =null
NETWORK_PARTITION_ID =openstack1
PARTITION_ID         =p1
</code></p>

<p>Now, the main fields to notice here are the <code>SERVICE_NAME</code>, <code>DEPLOYMENT</code> <code>PUPPET_IP</code>, and <code>PUPPET_HOSTNAME</code>. Why are they important? Because they are the main</p>

<h2>Configuration Values</h2>

<p>(See what I did there? <em>nudge nudge</em> ..aaaanyways) The init script makes use of (mainly) these values to formulate the hostname of the newly spawned instance. It will be of format <code>{random_number}.DEPLOYMENT.SERVICE_NAME.PUPPET_HOSTNAME</code>. For example the instance hostname resulting from the above payload would look like something as follows.</p>

<p><code>
2324332342243.default.php.puppet.chamilad.org
</code></p>

<p>Why is the Puppet master hostname suffixed to the instance hostname? That is because of the way Puppet master and the agent communicates.</p>

<p>For the secure communication between the Puppet agent and the master, a certificate is generated and signed by the Puppet master&rsquo;s in built Certificate Authority. Likewise, the client should also provide a signed certificate to prove its identity. At the initial moment when the connection between agent and the master establishes, the agent creates a certificate request and provide to the master. In Stratos Puppet master, a feature has been enabled, called AutoSign, which automatically signs and approves the certificate requests as long as their domain names is suffixed with Puppet master hostname. You can check this configuration, and change it even, at the <code>/etc/puppet/autosign.conf</code> file. If you change it, just keep in mind that the functionality of the init script will also have to be changed to let the agent certificate requests be signed automatically.</p>

<p>Okay. Now I&rsquo;ve forgotten what we were trying to understand by going this much deep in the code. Ah! Here it is! <em>&ldquo;How does the Puppet master automatically classify nodes to different Cartridge types?&rdquo;</em></p>

<p>Look at our sample hostname of the spawned PHP instance. Just before suffixing the Puppet master hostname, the Service name of the Cartridge is suffixed. So this hostname String will match the regex pattern of <code>/php/</code>. And that is what exactly happens at the Puppet master side. Each node, being a service type, is matched with a regular expression in the hostname of the Puppet agent. If you look at the different node definitions inside <code>/etc/puppet/manifests/nodes/</code> folder in the Stratos Puppet master, you will see that each node definition maps to a service type. For example the node definition of the PHP service looks something like the following.</p>

<p>```puppet
node /php/ inherits base {</p>

<p>  $docroot = &ldquo;/var/www/www&rdquo;
  $syslog=&ldquo;/var/log/apache2/error.log&rdquo;
  $samlalias=&ldquo;/var/www/&rdquo;</p>

<p>  class {&lsquo;php&rsquo;:}
}
```</p>

<p>Notice the node name being a regex? (The parent node, <code>base</code> defines a set of common variables that are useful to all or multiple Puppet modules, such as the Message Broker URL, Java distribution name etc). That is what gets matched to the Puppet agent certificate&rsquo;s hostname.</p>

<p>Now that we have an overall understanding of the Puppet context in Stratos let&rsquo;s take a look at how Puppet configures and starts the services in a spawned instance&hellip;. in the next article!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Stratos Cartridge Agent: Day 0]]></title>
    <link href="http://chamilad.github.io/blog/2015/03/17/apache-stratos-cartridge-agent-contract/"/>
    <updated>2015-03-17T04:25:03+05:30</updated>
    <id>http://chamilad.github.io/blog/2015/03/17/apache-stratos-cartridge-agent-contract</id>
    <content type="html"><![CDATA[<p>As the first post of a series of comprehensive guide to the Apache Stratos Cartridge Agent, let&rsquo;s look at the Cartridge Agent contract. Keep tuned in and expect more detailed explanations on the instance and Cartridge Agent configuration, workflow, different Cartridge Agent implementations, their configurations and newly introduced plugin system in the Python implementation.</p>

<h1>Role of the Cartridge Agent</h1>

<p>When the instances are spawned in Apache Stratos, there are a few requirements that the particular instance should fulfill. It should</p>

<ol>
<li>Listen to the message broker events that are intended to it and publish events notifying any listening parties of its current state (STARTED|ACTIVATED|MAINTENANCE_MODE etc)</li>
<li>Check if the intended ports of the instance are active or not and publish the status accordingly</li>
<li>Periodically check the health statistics of the instance and publish them to an expecting <a href="http://code.chamiladealwis.com/blog/2014/10/10/thrift-communication-in-apache-stratos/">Thrift compatible</a> Complex Event Processor</li>
<li>Clone from and constantly update an artifact repository if specified</li>
</ol>


<p>It&rsquo;s obvious that there should be an independent common component in each instance that fulfills these requests. And just like that, we&rsquo;ve stated the case for the cartridge agent.</p>

<h2>Message broker communication</h2>

<p>Apache Stratos has a loosely-coupled component structure which executes the major communication bulk over a message broker. This enables any new component to join the chit-chat without disrupting the ongoing communication or without any impact on the configuration of the existing components. Any component can go silent and it wouldn&rsquo;t affect the communication channel. The communication happens via message broker <em>Events</em> and <em>Topics</em> in the common communication channel. Therefore each component should only be aware of the location (and sometimes the credentials) of the common communication channel, the message broker.</p>

<p>The Cartridge Agent connects to the message broker, publishes its initial status and listens to the <em>topics</em> for any events that are important to it. We&rsquo;ll see what these events are and what their impact would be on the work flow of the agent in the walk through section.</p>

<h2>Ports activity check</h2>

<p>For each cartridge, a set of ports are defined in the cartridge definition. The intended services should run on these ports. The agent should determine if a the intended service is up or not before it can announce that it is ready to accept requests. It does so by checking if the specified ports are active or not.</p>

<h2>Health statistics publishing</h2>

<p>The Cloud is about Scale, and Scale is about Health. Apache Stratos auto-scaling feature takes care of the complex scaling requirements of the deployed services based on a number of parameters, on a number of levels. From the point of the instance, its contribution to the scaling effort should be to announce its health status to the decision making process.</p>

<p>The agent does this by collecting the memory usage and the load average values of the running instance and publishing them to a real time Complex Event Processor via Apache Thrift protocol. (Why doesn&rsquo;t it use the broker channel? Well, it&rsquo;s too darn slow to begin with for a real time event to be <em>real time</em>. Hammer and the problem anyone?) It does this periodically, usually every 15 seconds. If an instance stops publishing health stats events and stays dark for more than 60 seconds, the Complex Event Processor considers that instance to be a hopeless case and announces that an instance has gone dark. The auto-scaler, upon receiving this announcement (an <em>Event</em> published on a <em>topic</em> as you might have guessed), issues orders to terminate the faulty instance and spawn a new instance to take the place of the fallen comrade.</p>

<h2>Artifacts Distribution</h2>

<p>Most cartridge types deal with a set of artifacts that are hosted on a remote repository, that should be copied over to the instance and executed on. For an example a PHP cartridge will require a remote repository location to copy the web artifacts from. It is the Cartridge Agent that performs this artifact management task. In addition to cloning from the remote repository, there are cases where the locally modified artifacts should be pushed to the remote repository. This is also carried out by the Cartridge Agent.</p>

<p>It is the responsibility of the Cartridge Agent to manage all the tasks and make sure the instance goes through its intended life cycle. But, who configures and starts the Cartridge Agent? Keeping aside the philosophical overtone of that question, let&rsquo;s take a look at the instance configuration process in the next article before diving in to the Cartridge Agent life cycle itself.</p>
]]></content>
  </entry>
  
</feed>
