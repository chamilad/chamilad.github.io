<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | nuts!]]></title>
  <link href="http://chamilad.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://chamilad.github.io/"/>
  <updated>2015-03-17T06:17:56+05:30</updated>
  <id>http://chamilad.github.io/</id>
  <author>
    <name><![CDATA[chamila de alwis]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Consuming a Service Secured by WSO2 ESB]]></title>
    <link href="http://chamilad.github.io/blog/2014/07/19/consuming-a-service-secured-by-wso2-esb/"/>
    <updated>2014-07-19T18:27:13+05:30</updated>
    <id>http://chamilad.github.io/blog/2014/07/19/consuming-a-service-secured-by-wso2-esb</id>
    <content type="html"><![CDATA[<p>In the <a href="http://code.chamiladealwis.com/blog/2014/07/18/securing-a-web-service-with-wso2-esb/">last post</a> I explained the steps needed, although somewhat minimal, to secure an unsecured backend service with WSO2 ESB. In this post I will continue on to the client side of the communication explaining the minimal client needed to communicate with the secure proxy service we created and take a peak at the action going on under the hood.</p>

<h1>UsernameToken</h1>

<p>Before we dive in to the client side code let&rsquo;s take a look at the WS-Policy for the UsernameToken security we applied to our service.</p>

<p>Login to the WSO2 ESB <a href="https://localhost:9443/carbon">Management console</a> and go to the Proxy service we created. In the &ldquo;Quality of Service Configuration&rdquo; section there is a link to &ldquo;Policies&rdquo;. Go to it and click in the &ldquo;Edit Policy&rdquo; button in front of the SOAP12Binding sub section.</p>

<p>What we are interested here is the content inside the <code>&lt;sp:SignedSupportingTokens xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy"&gt;</code> tag. This describes the authentication policy that is applied to the proxy service. Since we applied UsernameToken the content will be similar to the following.</p>

<p>```xml
&lt;sp:SignedSupportingTokens xmlns:sp=&ldquo;<a href="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">http://schemas.xmlsoap.org/ws/2005/07/securitypolicy</a>&rdquo;></p>

<pre><code>&lt;wsp:Policy&gt;
   &lt;sp:UsernameToken sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient"&gt;&lt;/sp:UsernameToken&gt;
&lt;/wsp:Policy&gt;
</code></pre>

<p> &lt;/sp:SignedSupportingTokens>
```</p>

<p>This policy is embedded in the WSDL of the secured proxy service we created so the consuming party can derive the security demands of the service from it.</p>

<h1>Writing the Java Client</h1>

<p>To access the secure proxy service the following requirements should be satisfied.</p>

<ol>
<li>The server certificate should be added to the trust store.</li>
<li>Axis2 modules and libraries of Apache Rampart and its dependencies should be provided</li>
<li>The username and the password for the account which is granted access to the proxy service should be provided.</li>
</ol>


<h2>Adding the certificate to the trust store</h2>

<p>As you might be aware in HTTPS the server has to provide a self-signed or CA signed certificate for its secure communication and the client has to add that certificate as trusted to its trust store. WSO2Carbon products come with a self-signed certificate and you can add that certificate to your trust store to initiate secure communication. For demo purposes we&rsquo;ll use the same trust store that WSO2 ESB uses so you will not be needing to extract and import the certificate to your own trust store.</p>

<p>In case you&rsquo;re using your own trust store, <a href="http://udaraliyanage.wordpress.com/2014/06/14/convert-wso2carbon-jks-into-pem-format-extract-certificate-and-private-key/">this article</a> by Udara Liyanage describes how to extract the server certificate from the keystore. After the certificate is extracted add it to your trust store. For this you can use the keytool command as follows.</p>

<p><code>bash
keytool -import -alias wso2_esb_server -file /path/to/server-certificate-file.crt -keystore /path/to/trust-store.jks -storepass truststorepassword
</code>
You can use your own trust store and set the path to the keystore file in the code or you can use the Java runtime trust store which is located in <code>$JRE_HOME/lib/security</code>.</p>

<p>To verify that the certificate was added you can grep the list of certificates in the trust store.</p>

<p><code>bash
keytool -list -keystore /path/to/trust-store.jks -storepass truststorepassword | grep wso2_esb_server
</code></p>

<h2>Apache Rampart</h2>

<p>Apache Rampart handles the security aspects in Axis2 and is needed to make use of WS-Security.</p>

<p><a href="http://axis.apache.org/axis2/java/rampart/download.html">Download Rampart</a> and extract the zip file.</p>

<p>Inside the lib folder the rampart library and its dependencies are contained. Inside the modules folder rampart and rahas Axis2 modules are contained. Rampart libraries should be available in the Classpath of the Java client we are going to execute while the Rampart Axis2 modules should be available in an Axis2 repository.</p>

<p><a href="http://wso2.com/library/tutorials/axis2-repository/">An Axis2 repository</a> consist of the following folder structure.</p>

<p>```
└── repository
    ├── modules
    ├── services
    └── conf</p>

<pre><code>   └── axis2.xml
</code></pre>

<p>```</p>

<p>If you&rsquo;ve downloaded and extracted Axis2 to be used as a standalone Axis2 server then you can use that location. Copy the module archive (.mar) files from the extracted rampart folder to the repository/modules folder.</p>

<p>In the client code we will be engaging the Rampart module to handle the WS-Security headers.</p>

<h2>Client Code</h2>

<p>Assuming the service and the operations described in the <a href="http://code.chamiladealwis.com/blog/2014/07/01/creating-a-web-service-using-apache-axis2-no-ide/">&ldquo;Creating a Web Service using Apache Axis2&rdquo;</a> article the following Java client can be used to access the secured proxy service.</p>

<p>Create the Stub and the CallbackHandler classes using the <code>wsdl2java</code> tool as described in the above mentioned article. You must use the WSDL of the secured proxy service for source generation. Then code the client as follows. Replace <code>ESB_HOME</code> and <code>AXIS2_HOME</code> with your own locations.</p>

<p>```java</p>

<p>package com.chamiladealwis.ws.client;</p>

<p>import java.rmi.RemoteException;</p>

<p>import org.apache.axis2.context.ConfigurationContext;
import org.apache.axis2.context.ConfigurationContextFactory;</p>

<p>public class SimpleServiceSecureClient {</p>

<pre><code>public static void main(String[] args) {
    try {

        // set trust store path and password. 
        System.setProperty("javax.net.ssl.trustStore",
                "ESB_HOME/repository/resources/security/client-truststore.jks");
        System.setProperty("javax.net.ssl.trustStorePassword", "wso2carbon");

        // create the configuration context from an axis repository. 
        ConfigurationContext ctx =
                               ConfigurationContextFactory.createConfigurationContextFromFileSystem("AXIS2_HOME/repository",null);

        SimpleServiceExampleProxyStub secureStub = new SimpleServiceExampleProxyStub(ctx);

        // set username and password to access the service
        secureStub._getServiceClient().getOptions().setUserName("admin");
        secureStub._getServiceClient().getOptions().setPassword("admin");

        // engage rampart module to set WS-Security headers.
        secureStub._getServiceClient().engageModule("rampart");

        // execute remote call
        SimpleServiceExampleProxyStub.Add addReq = new SimpleServiceExampleProxyStub.Add();
        addReq.setNum1(45);
        addReq.setNum2(53);

        SimpleServiceExampleProxyStub.AddResponse addResponse = secureStub
                .add(addReq);

        System.out.println("Response received : " + addResponse.get_return());

    } catch (RemoteException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>}
```</p>

<p>We have used the trust store that WSO2 ESB uses so we will not have to import the certificate used by the server.</p>

<p>```java
System.setProperty(&ldquo;javax.net.ssl.trustStore&rdquo;,</p>

<pre><code>    "ESB_HOME/repository/resources/security/client-truststore.jks");
</code></pre>

<p>System.setProperty(&ldquo;javax.net.ssl.trustStorePassword&rdquo;, &ldquo;wso2carbon&rdquo;);
```</p>

<p>The ConfigurationContext is generated from the repository location. We have copied the Rampart and Rahas Axis2 modules to this repository to be used when later engageModule(&ldquo;rampart&rdquo;) is called.</p>

<p>```java
ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(&ldquo;AXIS2_HOME/repository&rdquo;,null);</p>

<p>SimpleServiceExampleProxyStub secureStub = new SimpleServiceExampleProxyStub(ctx);</p>

<p>&hellip;.
secureStub._getServiceClient().engageModule(&ldquo;rampart&rdquo;);
```</p>

<p>The username and the password to the account that is allowed to use the secured proxy service is included.</p>

<p><code>java
secureStub._getServiceClient().getOptions().setUserName("admin");
secureStub._getServiceClient().getOptions().setPassword("admin");
</code></p>

<p>Note that this code works with SOAP messages and WS-* standards. If you want to use the REST communication method use the following code. This code does not make use of Rampart module since authentication is done using HTTP Authorization header (Basic auth mechanism since we&rsquo;ve used UsernameToken policy in our proxy service).</p>

<p>```java
package com.chamiladealwis.ws.client;</p>

<p>import java.rmi.RemoteException;</p>

<p>import org.apache.axis2.Constants;
import org.apache.axis2.transport.http.HTTPConstants;
import org.apache.axis2.transport.http.HttpTransportProperties;
import org.apache.axis2.transport.http.HttpTransportProperties.Authenticator;</p>

<p>public class SimpleServiceSecureClient {</p>

<pre><code>public static void main(String[] args) {
    try {
        System.setProperty("javax.net.ssl.trustStore",
                "/home/chamilad/dev/wso2esb-4.8.1/repository/resources/security/client-truststore.jks");
        System.setProperty("javax.net.ssl.trustStorePassword", "wso2carbon");

        SimpleServiceExampleProxyStub secureStub = new SimpleServiceExampleProxyStub();

        // set credentials to the secure proxy service
        HttpTransportProperties.Authenticator authenticator = new Authenticator();
        authenticator.setUsername("admin");
        authenticator.setPassword("admin");
        secureStub._getServiceClient().getOptions().setProperty(HTTPConstants.AUTHENTICATE, authenticator);
        secureStub._getServiceClient().getOptions().setProperty(Constants.Configuration.ENABLE_REST, Constants.VALUE_TRUE);

        // execute remote call
        SimpleServiceExampleProxyStub.Add addReq = new SimpleServiceExampleProxyStub.Add();
        addReq.setNum1(45);
        addReq.setNum2(53);

        SimpleServiceExampleProxyStub.AddResponse addResponse = secureStub
                .add(addReq);

        System.out.println("Response received : " + addResponse.get_return());
    } catch (RemoteException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>}
```</p>

<p>Now get the backend service and the WSO2 ESB running and execute the client to see the results. If you use Wireshark or TCPMon you will observe that the communication between the client and the ESB is encrypted and thus not visible to outsiders while the communication between the ESB and the backend service is unencrypted.</p>

<h2>&ldquo;Unable to engage module : rampart&rdquo;</h2>

<p>If you get an error with the message &ldquo;Unable to engage module : rampart&rdquo; it is most likely because Axis2 cannot find the Rampart module archive files. Verify the following and try again.</p>

<ul>
<li>See that the repository location specified when creating the ConfigurationContext contains rampart<em>.mar and rahas</em>.mar files in the modules folder.</li>
<li>Check the Classpath locations to verify that rampart*.jar files are available.</li>
</ul>


<h1>Action Under the Hood</h1>

<p>Let us investigate the SOAP/REST messages that are used to communicate with the secured proxy service.</p>

<p>I used <a href="http://www.charlesproxy.com/documentation/proxying/ssl-proxying/">Charles Proxy</a> to capture the encrypted communication between the client and the ESB. For some reason (I&rsquo;m guessing <a href="http://vincent.bernat.im/en/blog/2011-ssl-perfect-forward-secrecy.html">this</a> to be the reason, but this is still to be verified. The cipher suite mentioned in the Server Hello packet is TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA.) Wireshark couldn&rsquo;t decrypt the captured packets even when the server&rsquo;s private key was provided. Charles Proxy can make use of SSL Proxying in which it produces its own certificates based on its root certificate to communicate as a man in the middle. Charles' root certificate should be added to the trust store that is used in our client.</p>

<p>The SOAP message that is sent from our client consists of the following SOAP header.</p>

<p>```xml
&lt;soapenv:Header></p>

<pre><code>&lt;wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" soapenv:mustUnderstand="true"&gt;
    &lt;wsu:Timestamp wsu:Id="TS-1"&gt;
        &lt;wsu:Created&gt;2014-08-02T09:00:56.439Z&lt;/wsu:Created&gt;
        &lt;wsu:Expires&gt;2014-08-02T09:05:56.439Z&lt;/wsu:Expires&gt;
    &lt;/wsu:Timestamp&gt;
    &lt;wsse:UsernameToken wsu:Id="UsernameToken-2"&gt;
        &lt;wsse:Username&gt;admin&lt;/wsse:Username&gt;
        &lt;wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText"&gt;admin&lt;/wsse:Password&gt;
    &lt;/wsse:UsernameToken&gt;
&lt;/wsse:Security&gt;
</code></pre>

<p>&lt;/soapenv:Header>
```</p>

<p>Notice the username and the password fields? Yes, the password is sent in plaint text over HTTPS therefore if somehow HTTPS is compromised the password will be visible. To overcome this the WS-Policy for WS-Security can be <a href="http://soasecurity.org/2014/03/19/securing-a-proxy-service-in-wso2-esb-1-1-using-hash-passwords-in-username-token">modified to use a password digest</a> instead of a plain text password.</p>

<p>The function of <code>&lt;wsu:Timestamp&gt;</code>, which in short is to prevent replay attacks, is best described <a href="http://hasini-gunasinghe.blogspot.com/2012/02/timestamp-in-ws-security-to-mitigate.html">here</a>.</p>

<p>WSO2 ESB will process and strip the WSSE:Security header from the message to forward it to the backend service. When the response comes from the backend service ESB will add the related WS-Security headers to the outgoing message.</p>

<p>```xml
&lt;soapenv:Header></p>

<pre><code>&lt;wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" soapenv:mustUnderstand="true"&gt;
    &lt;wsu:Timestamp xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="Timestamp-26"&gt;
        &lt;wsu:Created&gt;2014-08-02T09:00:56.704Z&lt;/wsu:Created&gt;
        &lt;wsu:Expires&gt;2014-08-02T09:05:56.704Z&lt;/wsu:Expires&gt;
    &lt;/wsu:Timestamp&gt;
&lt;/wsse:Security&gt;
</code></pre>

<p>&lt;/soapenv:Header>
```</p>

<p>If you used REST instead of SOAP you will see the following HTTP headers in the outgoing message from your client.</p>

<p>```
POST /services/SimpleServiceSecureExampleProxy.SimpleServiceSecureExampleProxyHttpsSoap12Endpoint HTTP/1.1
Content-Type: application/xml; charset=UTF-8
SOAPAction: urn:getItemsAvailable
User-Agent: Axis2
Transfer-Encoding: chunked
Host: hostname:8243
Authorization: Basic YWRtaW46YWRtaW4=
Content-Length: 101</p>

<p>&lt;ns1:add xmlns:ns1=&ldquo;<a href="http://client.ws.chamiladealwis.com">http://client.ws.chamiladealwis.com</a>&rdquo;></p>

<pre><code>&lt;ns1:num1&gt;45&lt;/ns1:itemName&gt;
&lt;ns1:num2&gt;53&lt;/ns1:clarkName&gt;
</code></pre>

<p>&lt;/ns1:add>
```</p>

<p>Note the HTTP &ldquo;Authorization&rdquo; header and the value &ldquo;Basic&rdquo;. The value after &ldquo;Basic&rdquo; is the base64 encoded string containing the username:password. You can decrypt the encoded string to verify this using any <a href="http://www5.rptea.com/base64/">online tool</a>.</p>

<p>There are many policies that can be used to secure a proxy service, and UsernameToken is just the simplest form. More complex policies involve defining custom password callback handlers to refer to resources like federated identity to authenticate server calls. UsernameToken deals with plain text passwords so it should be only used for development purposes and not for production.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Securing a Web Service with WSO2 ESB]]></title>
    <link href="http://chamilad.github.io/blog/2014/07/18/securing-a-web-service-with-wso2-esb/"/>
    <updated>2014-07-18T23:17:46+05:30</updated>
    <id>http://chamilad.github.io/blog/2014/07/18/securing-a-web-service-with-wso2-esb</id>
    <content type="html"><![CDATA[<p>WSO2 Enterprise Service Bus is one of the <a href="http://blog.samisa.org/2014/02/wso2-esb-performance-round-75.html">best performing implementations</a> for the Enterprise market. In this article I will briefly go through what it takes to secure an unsecured backend web service using WSO2 ESB as a mediator.</p>

<p>Security in Web Services is covered by the WS-Security standard. There are <a href="http://docs.oasis-open.org/ws-sx/security-policy/examples/ws-sp-usecases-examples-cd-01.html">various policies</a> such as simple username and password authentication and PKI certificates that can be used to secure a Web Service. The policy that will be used is described using the WS-Policy standard.</p>

<p>WSDL of the secured service will have the WS-Security policy embedded and the consumer will be able to filter out the WS-Security policy from it to implement the client side security demands.</p>

<p>For this example we will be using the basic UsernameToken with Plain Text password policy which is supported right out of the box by WSO2 ESB. Note that this policy is recommended only for pre-production environments because the password is communicated in plain text. WSO2 ESB supports by default twenty security scenarios and you can always customize the policy to your liking.</p>

<h1>Pre-requisites</h1>

<ol>
<li>Unsecured backend service</li>
<li>WSO2 ESB (4.8.1 is used in this article)</li>
</ol>


<h2>Backend Service</h2>

<p>For demo purposes get a simple Web Service running. Refer to my earlier post, <a href="http://code.chamiladealwis.com/blog/2014/07/01/creating-a-web-service-using-apache-axis2-no-ide/">Creating a Web Service using Apache Axis2</a>, for help.</p>

<h2>Setting up WSO2 ESB</h2>

<p><a href="http://wso2.com/products/enterprise-service-bus/">Download</a> WSO2 ESB and extract it. Go to its <code>bin</code> folder and execute <code>wso2server.sh</code>. After it is executed go to the <a href="https://localhost:9443/carbon">management console</a> and log in. The default username and password is <code>admin</code>.</p>

<h1>Creating the Proxy Service</h1>

<p>We will create a proxy service for the backend service and then secure it with the UsernameToken policy.</p>

<p>Go to the ESB <a href="https://localhost:9443/carbon">management console</a> and add a proxy service by clicking on &ldquo;Proxy Service&rdquo; under Services->Add menu of the Main tab.</p>

<p><img src="/images/post_resource/esb-new-proxy.jpg"></p>

<p>Choose either &ldquo;Pass Through Proxy&rdquo; or &ldquo;WSDL Based Proxy&rdquo;. Fill the details according to the following</p>

<h2>Pass Through Proxy</h2>

<p><img src="/images/post_resource/esb-pass-through-options.jpg"></p>

<ul>
<li><p>Proxy Service Name &ndash; Enter an identifying name for the Proxy service you&rsquo;re creating.</p></li>
<li><p>Target Endpoint &ndash; Select &ldquo;Enter URL&rdquo;. &ldquo;Pick From Registry&rdquo; option allows you to select the endpoint stored as a resource on the configuration registry or the governance registry. We will be entering the endpoint URL by hand.</p></li>
<li><p>Target URL &ndash; Copy the URL of the backend service. This will be the WSDL url on the Axis2 service you created without the <code>?wsdl</code> string at the end.</p></li>
<li><p>On the &ldquo;Publish WSDL Options&rdquo; select &ldquo;Specify source URL&rdquo; for &ldquo;Publishing WSDL&rdquo;</p></li>
<li><p>WSDL URI &ndash; Enter the WSDL URL for the backend service. Click on &ldquo;Test URI&rdquo; to test the connection.</p></li>
</ul>


<p>Click Next.</p>

<h2>WSDL Proxy</h2>

<p><img src="/images/post_resource/esb-wdl-based-options.jpg"></p>

<ul>
<li><p>Proxy Service Name &ndash; Enter an identifying name for the Proxy service you&rsquo;re creating.</p></li>
<li><p>WSDL URI &ndash; The URI of the WSDL of the backend service.</p></li>
<li><p>WSDL Service &ndash; This is the service name that is used in the WSDL as the identifier for the service. In the WSDL document this is the value for the attribute <code>name</code> in the <code>wsdl:service</code> tag.</p></li>
<li><p>WSDL Port &ndash; This is the endpoint that you&rsquo;re going to use for the proxy service. Normally three types of ports are exposed for a service. Those are</p>

<ul>
<li>SOAP1.1 Endpoint &ndash; ServiceNameHttpSoap11Endpoint</li>
<li>SOAP1.2 Endpoint &ndash; ServiceNameHttpSOap12Endpoint</li>
<li>HTTP REST Endpoint &ndash; ServiceNameHttpEndpoint</li>
</ul>
</li>
</ul>


<p>Use either SOAP 1.1 or SOAP 1.2 endpoint as the port. You can find the names under the <code>&lt;wsdl:service&gt;-&gt;&lt;wsdl:port&gt;</code> tags.</p>

<p>Click Next.</p>

<p>Your proxy service will be created. WSO2 ESB has a tool called &ldquo;Try It&rdquo; which can be used as a test tool for Web Services. <a href="https://localhost:9443/carbon/service-mgt/index.jsp?region=region1&amp;item=services_list_menu">Service list page</a> will have a link to the &ldquo;Try It&rdquo; console in front of each service. Test the proxy service you just created to verify that we can go ahead to the securing phase.</p>

<p>At this point you have an unsecured proxy service that does basically nothing as a mediator to the backend service. We need to secure the service with UsernameToken policy so that the ESB will handle security aspects and only pass SOAP messages back and forth to the backend service sans the WS-Security.</p>

<h1>Securing the Proxy Service</h1>

<p>If you list the services of the ESB you will see that the proxy service you created just now is marked as unsecured, with the unlocked padlock as the icon.</p>

<p><img src="/images/post_resource/esb-unsecured-proxy.jpg"></p>

<p>Click on that icon to secure the service. Select &ldquo;Yes&rdquo; in the next page and you will be presented with the policy types that WSO2 ESB supports right out of the box.</p>

<p><img src="/images/post_resource/esb-secure-service-options.jpg"></p>

<p>Select &ldquo;UsernameToken&rdquo; and click Next.</p>

<p>Select the user groups that are allowed to use the service. In this case select admin.</p>

<p><img src="/images/post_resource/esb-secure-users-options.jpg"></p>

<p>Voilà! You have secured your proxy service. Run &ldquo;Try It&rdquo; again and enter the username and the password (in this case admin:admin) to consume the service. If you try to consume the service without entering the proper user credentials you will be presented with an AxisFault.</p>

<p>If you check the WSDL of the secured proxy service you will observe the embedded WS-Policy describing the WS-Security policy (UsernameToken in our case) in the top most part of the WSDL document. If you wish to edit this policy you can do so by selecting &ldquo;Edit Policy&rdquo; in the Policies page of the Proxy Service. I will go to details of customized policies in another article.</p>

<p>In the next article I will elaborate on how to code a client to consume the secured proxy service and how UsernameToken policy is represented in the WS-Security headers.</p>
]]></content>
  </entry>
  
</feed>
