<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Multi Threading on chamila.dev</title>
    <link>https://chamila.dev/tags/multi-threading/</link>
    <description>Recent content in Multi Threading on chamila.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Nov 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chamila.dev/tags/multi-threading/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Timing Out of Long Running Methods in Python</title>
      <link>https://chamila.dev/blog/2015-11-26_timing-out-of-long-running-methods-in-python/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chamila.dev/blog/2015-11-26_timing-out-of-long-running-methods-in-python/</guid>
      <description>Sometimes there are conditions under which a function call could not return in a needed time period and would cause unexpected behavior. For example, a file read could take more time than anticipated and leave the code execution without proper control over what to do when such a situation occurs. This can be worse if the said function call directs to an external library which we canâ€™t control.
Python has a nifty module called signal which exposes UNIX Signal numbers and a way to register callbacks for each signal.</description>
    </item>
    
  </channel>
</rss>