<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on chamila.dev</title>
    <link>https://chamila.dev/tags/security/</link>
    <description>Recent content in security on chamila.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Feb 2025 00:04:06 +1300</lastBuildDate><atom:link href="https://chamila.dev/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Authentication for K8s: EKS Pod Identities Deep Dive</title>
      <link>https://chamila.dev/blog/2025-02-01_aws-authentication-for-k8s-eks-pod-identities-deep-dive/</link>
      <pubDate>Sat, 01 Feb 2025 00:04:06 +1300</pubDate>
      
      <guid>https://chamila.dev/blog/2025-02-01_aws-authentication-for-k8s-eks-pod-identities-deep-dive/</guid>
      <description>In the last article, I covered in brief, the solutions for the problem of authenticating into AWS from K8s workloads. This is the first detailed article (and the video) I promised I&amp;rsquo;ll follow up that with, going into to details on EKS Pod Identities. I&amp;rsquo;m hoping to make this the most detailed, most in-depth video on the topic, but this article would probably have less details, so I highly recommend watching the video.</description>
    </item>
    
    <item>
      <title>AWS Authentication for K8s: Introduction</title>
      <link>https://chamila.dev/blog/2025-01-27_aws-authentication-for-k8s-introduction/</link>
      <pubDate>Mon, 27 Jan 2025 00:01:44 +1300</pubDate>
      
      <guid>https://chamila.dev/blog/2025-01-27_aws-authentication-for-k8s-introduction/</guid>
      <description>This is an introductory post on the problem of authenticating into AWS from K8s workloads, either from within AWS or from outside of it. I&amp;rsquo;m going to discuss three major approaches to this problem and compare them against each other. I&amp;rsquo;ll follow this up with more detailed articles (and videos) on each approach, where I&amp;rsquo;ll go into details as much as possible.
Problem Statement The key problem I&amp;rsquo;m trying to tackle here is how to authenticate into AWS from workloads running in K8s.</description>
    </item>
    
    <item>
      <title>Deep Dive in to AWS Resource Control Policies</title>
      <link>https://chamila.dev/blog/2024-12-15_deep-dive-in-to-aws-resource-control-policies/</link>
      <pubDate>Sun, 15 Dec 2024 23:35:34 +1300</pubDate>
      
      <guid>https://chamila.dev/blog/2024-12-15_deep-dive-in-to-aws-resource-control-policies/</guid>
      <description>This article is on one of the new features AWS released recently, called Resource Control Policies (RCPs).
RCPs are a new way to enforce policies on data (resources) rather than principals in AWS. For principals, the way to enforce policies is to use Service Control Policies (SCPs), which if you&amp;rsquo;re already familiar with AWS would know plenty about. However, RCPs can still be a little confusing.
What are RCPs?</description>
    </item>
    
    <item>
      <title>Deriving AWS Account ID from Access Key</title>
      <link>https://chamila.dev/blog/2024-03-11_deriving-aws-account-id-from-access-key/</link>
      <pubDate>Mon, 11 Mar 2024 17:04:21 +1300</pubDate>
      
      <guid>https://chamila.dev/blog/2024-03-11_deriving-aws-account-id-from-access-key/</guid>
      <description>AWS Account IDs are interesting. They are not directly considered as sensitive, but on the other hand everyone seems to consider them as sensitive.
It&amp;rsquo;s probably for good reason. You shouldn&amp;rsquo;t give out anything that isn&amp;rsquo;t needed to get work done, even if those data are not &amp;ldquo;sensitive&amp;rdquo; in particular. Your name isn&amp;rsquo;t sensitive in particular, but you don&amp;rsquo;t usually walk around with your name on your tshirt either.</description>
    </item>
    
  </channel>
</rss>
