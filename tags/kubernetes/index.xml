<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on chamilad.github.io</title>
    <link>https://chamilad.github.io/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on chamilad.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Feb 2019 17:56:15 +0000</lastBuildDate>
    
	<atom:link href="https://chamilad.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Load Balancing and Reverse Proxying for Kubernetes Services</title>
      <link>https://chamilad.github.io/post/2019-02-28_load-balancing-and-reverse-proxying-for-kubernetes-services/</link>
      <pubDate>Thu, 28 Feb 2019 17:56:15 +0000</pubDate>
      
      <guid>https://chamilad.github.io/post/2019-02-28_load-balancing-and-reverse-proxying-for-kubernetes-services/</guid>
      <description>Different load balancing and reverse proxying strategies to use in Production K8s Deployments to expose services to outside traffic Morning sunlight on Horton Plains National Park In this post, I’m going to tackle a topic that any K8s novice would start to think about, once they have cleared the basic concepts. How would one go about exposing the services deployed inside a K8s cluster to outside traffic?The content and some of the diagrams I’ve used in the post are from an internal tech talk I conducted at WSO2.</description>
    </item>
    
    <item>
      <title>Thinking of Moving Your WSO2 Deployment On to Kubernetes?</title>
      <link>https://chamilad.github.io/post/2017-01-22_thinking-of-moving-your-wso2-deployment-on-to-kubernetes/</link>
      <pubDate>Sun, 22 Jan 2017 19:25:15 +0000</pubDate>
      
      <guid>https://chamilad.github.io/post/2017-01-22_thinking-of-moving-your-wso2-deployment-on-to-kubernetes/</guid>
      <description>Moving from a Virtual Machine based deployment to a Container Clustering environment can be quite a few sleepless nights. Cloud deployment artifacts for WSO2 products would reduce this number by a few, because of their tried and tested nature. These include Dockerfiles, Puppet based configurations, Kubernetes and Mesos deployment artifacts. As easy as these artifacts make life easier during a redesign stage of an existing deployment, let us anyway walk through some points to keep in mind regarding a WSO2 deployment on top of Kubernetes.</description>
    </item>
    
    <item>
      <title>Running WSO2 Products on Kubernetes</title>
      <link>https://chamilad.github.io/post/2016-02-09_running-wso2-products-on-kubernetes/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://chamilad.github.io/post/2016-02-09_running-wso2-products-on-kubernetes/</guid>
      <description>Running WSO2 Products on Kubernetes
 Please note that the following article has ‘expired’ in terms of accuracy when it comes to the artifacts used and the way things are done. WSO2 has made many improvements on top the configurations mentioned below and how to manipulate those artifacts might have been changed since.
 It’s 2016. Kubernetes needs no introduction. Neither does WSO2, so let’s get to the point. Let’s run WSO2 Identity Server on Kubernetes!</description>
    </item>
    
  </channel>
</rss>