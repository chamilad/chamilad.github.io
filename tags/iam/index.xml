<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Iam on chamila.dev</title>
    <link>https://chamila.dev/tags/iam/</link>
    <description>Recent content in Iam on chamila.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Feb 2025 00:04:06 +1300</lastBuildDate><atom:link href="https://chamila.dev/tags/iam/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Authentication for K8s: EKS Pod Identities Deep Dive</title>
      <link>https://chamila.dev/blog/2025-02-01_aws-authentication-for-k8s-eks-pod-identities-deep-dive/</link>
      <pubDate>Sat, 01 Feb 2025 00:04:06 +1300</pubDate>
      
      <guid>https://chamila.dev/blog/2025-02-01_aws-authentication-for-k8s-eks-pod-identities-deep-dive/</guid>
      <description>In the last article, I covered in brief, the solutions for the problem of authenticating into AWS from K8s workloads. This is the first detailed article (and the video) I promised I&amp;rsquo;ll follow up that with, going into to details on EKS Pod Identities. I&amp;rsquo;m hoping to make this the most detailed, most in-depth video on the topic, but this article would probably have less details, so I highly recommend watching the video.</description>
    </item>
    
    <item>
      <title>AWS Authentication for K8s: Introduction</title>
      <link>https://chamila.dev/blog/2025-01-27_aws-authentication-for-k8s-introduction/</link>
      <pubDate>Mon, 27 Jan 2025 00:01:44 +1300</pubDate>
      
      <guid>https://chamila.dev/blog/2025-01-27_aws-authentication-for-k8s-introduction/</guid>
      <description>This is an introductory post on the problem of authenticating into AWS from K8s workloads, either from within AWS or from outside of it. I&amp;rsquo;m going to discuss three major approaches to this problem and compare them against each other. I&amp;rsquo;ll follow this up with more detailed articles (and videos) on each approach, where I&amp;rsquo;ll go into details as much as possible.
Problem Statement The key problem I&amp;rsquo;m trying to tackle here is how to authenticate into AWS from workloads running in K8s.</description>
    </item>
    
    <item>
      <title>Deep Dive in to AWS Resource Control Policies</title>
      <link>https://chamila.dev/blog/2024-12-15_deep-dive-in-to-aws-resource-control-policies/</link>
      <pubDate>Sun, 15 Dec 2024 23:35:34 +1300</pubDate>
      
      <guid>https://chamila.dev/blog/2024-12-15_deep-dive-in-to-aws-resource-control-policies/</guid>
      <description>This article is on one of the new features AWS released recently, called Resource Control Policies (RCPs).
RCPs are a new way to enforce policies on data (resources) rather than principals in AWS. For principals, the way to enforce policies is to use Service Control Policies (SCPs), which if you&amp;rsquo;re already familiar with AWS would know plenty about. However, RCPs can still be a little confusing.
What are RCPs?</description>
    </item>
    
    <item>
      <title>Sample: WSO2 EI Cache Mediator based Token Caching</title>
      <link>https://chamila.dev/blog/2017-11-12_sample-wso2-ei-cache-mediator-based-token-caching/</link>
      <pubDate>Sun, 12 Nov 2017 14:30:44 +0000</pubDate>
      
      <guid>https://chamila.dev/blog/2017-11-12_sample-wso2-ei-cache-mediator-based-token-caching/</guid>
      <description>This post and the sample code are the results of a particular issue I had to tackle recently. Though the sample code is my own, the idea and the approach have many authors, arising from the collective knowledge on the WSO2 Middleware Stack.
 The Typical Case forÂ Caching Token based authentication is not a new paradigm. The basic story is,
 Talk to a Identity Management Service and obtain a token based on a kind of authentication Call a service provider API, providing the token received in step #1 Service provider validates the token and acts on the privileges translated from the token  If at one point of your developer life, if you have invoked an API based on an access token, you are familiar with this scenario.</description>
    </item>
    
  </channel>
</rss>
