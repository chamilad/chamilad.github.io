<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log Analysis on chamilad.github.io</title>
    <link>https://chamilad.github.io/tags/log-analysis/</link>
    <description>Recent content in Log Analysis on chamilad.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Nov 2018 09:51:30 +0000</lastBuildDate>
    
	<atom:link href="https://chamilad.github.io/tags/log-analysis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Publishing WSO2 Logs to Splunk from a Containerized Deployment</title>
      <link>https://chamilad.github.io/post/2018-11-28_publishing-wso2-logs-to-splunk-from-a-containerized-deployment/</link>
      <pubDate>Wed, 28 Nov 2018 09:51:30 +0000</pubDate>
      
      <guid>https://chamilad.github.io/post/2018-11-28_publishing-wso2-logs-to-splunk-from-a-containerized-deployment/</guid>
      <description>Or how to publish to Splunk from any Docker environment WSO2 products follow a standard structure when it comes to configuration, data, artifacts, and logging. Configuration files are found in /repository/conf folder, data in /repository/data, artifacts in /repository/deployment (or in /repository/tenants folder if you’re in to multi-tenancy). All the log files are written into /repository/logs folder.
Log Aggregation All log events are output as entries to files through Log4J. Because of this, when it’s time to attach WSO2 logging to a log aggregator, it’s a matter of incorporating a tailing file reader agent and directing it towards /repository/logs folder.</description>
    </item>
    
    <item>
      <title>A little bit of Bashfu for a specific case of log analysis</title>
      <link>https://chamilad.github.io/post/2018-05-01_little-bit-of-bashfu-for-a-specific-case-of-log-analysis/</link>
      <pubDate>Tue, 01 May 2018 07:46:05 +0000</pubDate>
      
      <guid>https://chamilad.github.io/post/2018-05-01_little-bit-of-bashfu-for-a-specific-case-of-log-analysis/</guid>
      <description>This post is not about a solution to a generic issue. This post is about how I found some way to cut and assemble a large log file using a few Bash tools (and subliminally why Unix principle of implementing stuff may be the superior way).
So today, there came a need to sort through a large access log file for a list of request counts for each key. It’s not just a key — request count relationship.</description>
    </item>
    
  </channel>
</rss>