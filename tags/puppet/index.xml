<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Puppet on chamila.dev</title>
    <link>https://chamila.dev/tags/puppet/</link>
    <description>Recent content in Puppet on chamila.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jul 2017 11:40:50 +0000</lastBuildDate>
    
	<atom:link href="https://chamila.dev/tags/puppet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Infrastructure as Code : AWS CloudFormation</title>
      <link>https://chamila.dev/posts/2017-07-03_infrastructure-as-code-aws-cloudformation/</link>
      <pubDate>Mon, 03 Jul 2017 11:40:50 +0000</pubDate>
      
      <guid>https://chamila.dev/posts/2017-07-03_infrastructure-as-code-aws-cloudformation/</guid>
      <description>This blog post is based on a talk I did on AWS CloudFormation as an introduction.
 The case for Infrastructure as Code Imagine a typical deployment of a software stack. The process might look like the following.
 Design solution architecture Estimate infrastructure specs Configure compute, network, and database resources manually Deploy the applications and prepare databases Test and ship  Pretty simple from the looks of it doesn’t it?</description>
    </item>
    
    <item>
      <title>Running WSO2 Products on Kubernetes</title>
      <link>https://chamila.dev/posts/2016-02-09_running-wso2-products-on-kubernetes/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://chamila.dev/posts/2016-02-09_running-wso2-products-on-kubernetes/</guid>
      <description>Running WSO2 Products on Kubernetes
 Please note that the following article has ‘expired’ in terms of accuracy when it comes to the artifacts used and the way things are done. WSO2 has made many improvements on top the configurations mentioned below and how to manipulate those artifacts might have been changed since.
 It’s 2016. Kubernetes needs no introduction. Neither does WSO2, so let’s get to the point. Let’s run WSO2 Identity Server on Kubernetes!</description>
    </item>
    
    <item>
      <title>Apache Stratos Cartridge Agent: Instance Configuration by Puppet 2</title>
      <link>https://chamila.dev/posts/2015-03-21_apache-stratos-cartridge-agent-instance-configuration-by-puppet-2/</link>
      <pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chamila.dev/posts/2015-03-21_apache-stratos-cartridge-agent-instance-configuration-by-puppet-2/</guid>
      <description>This is a part of a series of articles on Apache Stratos Cartridge Agent. If you feel like you’ve missed the memo, why not start from the first article?
 One of the main responsibilities of the Cartridge Agent is to start the services related the Cartridge type. To do this the Cartridge Agent should be configured with proper parameters. As we discussed in the last article, Puppet can be used to install, configure and start the Cartridge Agent.</description>
    </item>
    
    <item>
      <title>Apache Stratos Cartridge Agent: Instance Configuration by Puppet 1</title>
      <link>https://chamila.dev/posts/2015-03-17_apache-stratos-cartridge-agent-instance-configuration-by-puppet-1/</link>
      <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chamila.dev/posts/2015-03-17_apache-stratos-cartridge-agent-instance-configuration-by-puppet-1/</guid>
      <description>This is a part of a series of articles on Apache Stratos Cartridge Agent. If you feel like you’ve missed the memo, why not start from the first article?
 When an application is deployed in Apache Stratos, what happens is that for each cartridge in the application, an instance creation call is made to the configured IaaS via the Cloud Controller component. This call contains only the base image ID (in OpenStack this is an image UUID, in Amazon EC2 this is an AMI), the instance creation parameters like the instance flavor, security group etc and the payload of Stratos related information that is targeted to that particular instance.</description>
    </item>
    
  </channel>
</rss>